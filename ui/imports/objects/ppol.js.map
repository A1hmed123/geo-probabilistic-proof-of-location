{
  "version": 3,
  "file": "ppol.js",
  "sourceRoot": "",
  "sources": [
    "ppol.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,IAAA,EAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,IAAA,GAAO,MAAM,CAAC;;AACd,IAAG,OAAO,IAAP,KAAe,WAAlB;EACE,IAAA,GAAO,IAAI,IAAJ,CAAS,IAAI,CAAC,eAAd,EADT;CAAA,MAAA;EAGE,IAAA,GAAO,IAAI,IAAJ,CAAS,IAAI,IAAI,CAAC,SAAS,CAAC,YAAnB,CAAgC,uBAAhC,CAAT,EAHT;;;AAKA,OAAA,IAAO,IAAP,GAAc,QAAA,CAAA,CAAA;AACZ,MAAA;EAAA,IAAA,GAAO;EACP,IAAI,CAAC,QAAL,GAAgB;EAChB,IAAI,CAAC,OAAL,GAAe;EAEf,IAAI,CAAC,IAAL,GAAY,QAAA,CAAC,QAAD,CAAA;AACV,QAAA;IAAA,IAAI,CAAC,OAAL,GAAe;IACf,GAAA,GAAM,OAAA,CAAQ,iBAAR,CAA0B,CAAC;IACjC,IAAI,CAAC,QAAL,GAAgB,IAAI,IAAI,CAAC,GAAG,CAAC,QAAb,CAAsB,GAAtB,EAA2B,QAA3B;WAChB,IAAI,CAAC,GAAG,CAAC,WAAT,CAAA,CAAsB,CAAC,IAAvB,CACE,QAAA,CAAC,QAAD,CAAA;aACE,IAAI,CAAC,GAAG,CAAC,cAAT,GAA0B,QAAS,CAAA,CAAA;IADrC,CADF;EAJU,EAJZ;;EAeA,IAAI,CAAC,iBAAL,GAAyB,QAAA,CAAC,KAAD,CAAA;AACvB,QAAA;IAAA,KAAA,GAAQ;AACR,WAAO,IAAI,CAAC,QAAQ,CAAC,OAAQ,CAAA,qBAAA,CAAtB,CAAA,CAA8C,CAAC,IAA/C,CAAA,CAAqD,CAAC,IAAtD,CACL,QAAA,CAAC,MAAD,CAAA;AACE,UAAA,KAAA,EAAA,WAAA,EAAA,OAAA,EAAA;MAAA,KAAA,GAAQ,CAAC;MACT,IAAG,KAAA,KAAS,CAAZ;AACE,eAAO,GADT;;MAEA,KAAA,GAAQ,IAAI,KAAJ,CAAU,KAAV;MACR,OAAA,GAAU,QAAA,CAAC,EAAD,CAAA;AACR,eAAO,IAAI,CAAC,QAAQ,CAAC,OAAQ,CAAA,gBAAA,CAAtB,CAAwC,EAAxC,CAA2C,CAAC,IAA5C,CAAA,CAAkD,CAAC,IAAnD,CACL,QAAA,CAAC,KAAD,CAAA;AACE,iBAAO,IAAI,OAAJ,CAAY,QAAA,CAAC,QAAD,EAAW,MAAX,CAAA;YACjB,IAAG,OAAO,KAAP,KAAgB,IAAnB;cACE,KAAM,CAAA,EAAA,CAAN,GAAY;cACZ,QAAA,CAAA,EAFF;aAAA,MAAA;cAIE,MAAA,CAAA,EAJF;;UADiB,CAAZ;QADT,CADK;MADC;MAYV,WAAA;;AAAe;QAAA,KAAsB,+HAAtB;uBAAA,OAAA,CAAQ,EAAR;QAAA,CAAA;;;AACf,aAAO,OAAO,CAAC,GAAR,CAAY,WAAZ;IAlBT,CADK,CAoBN,CAAC,IApBK,CAqBL,QAAA,CAAA,CAAA;AACE,aAAO,KAAK,CAAC,MAAN,CAAa,QAAA,CAAC,KAAD,CAAA;eAAW,KAAA,KAAS;MAApB,CAAb;IADT,CArBK;EAFgB;EA2BzB,IAAI,CAAC,cAAL,GAAsB,QAAA,CAAC,MAAD,EAAS,IAAT,EAAe,QAAf,CAAA;AACpB,QAAA,EAAA,EAAA,EAAA,EAAA;IAAA,EAAA,GAAK,MAAM,CAAC,KAAP,CAAA;IACL,MAAA,GAAS;AACT,WAAM,IAAA,GAAO,CAAb;MACE,EAAA,GAAK,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,CAAA,CAAA,GAAc,EAAE,CAAC,MAA5B;MACL,MAAM,CAAC,IAAP,CAAY,EAAG,CAAA,EAAA,CAAf;MACA,EAAE,CAAC,MAAH,CAAU,EAAV;MACA,IAAA,IAAQ;IAJV;AAKA,WAAO;EARa;EAUtB,IAAI,CAAC,QAAL,GAAgB,QAAA,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,CAAA;AACd,QAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAA;IAAA,QAAA,GAAW;IACX,KAAS,0IAAT;MACE,QAAQ,CAAC,IAAT,CAAc,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,CAAA,CAAA,YAAc,GAAG,IAA5B,CAAd;IADF;WAEA,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAtB,CAA+B,QAA/B,EAAyC,OAAzC,EAAkD,WAAlD,EAA+D,QAA/D,CAAwE,CAAC,IAAzE,CAAA,CAA+E,CAAC,IAAhF,CACE,QAAA,CAAC,IAAD,EAAO,QAAP,CAAA;AACE,UAAA;MAAA,IAAG,QAAH;QACE,OAAA,GAAU,IAAI,CAAC,SAAL,CAAe,IAAf;AACV,eAAO,QAFT;;AAGA,aAAO;IAJT,CADF;EAJc,EApDhB;;EAkEA,IAAI,CAAC,WAAL,GAAmB,QAAA,CAAC,IAAD,CAAA;AACjB,QAAA;IAAA,KAAA,GAAQ;WACR,IAAI,CAAC,GAAG,CAAC,QAAT,CAAkB,QAAlB,CAA2B,CAAC,IAA5B,CACE,QAAA,CAAC,MAAD,CAAA;AACE,UAAA,QAAA,EAAA;MAAA,GAAA,GAAM,CAAA,CAAA,CAAG,MAAM,CAAC,MAAV,CAAA,CAAA,CAAmB,MAAM,CAAC,IAA1B,CAAA,CAAA,CAAiC,IAAjC,CAAA;MACN,KAAA,GAAQ;aACR,QAAA,GAAW,IAAI,CAAC,GAAG,CAAC,IAAT,CAAc,IAAI,CAAC,KAAK,CAAC,SAAX,CAAqB,GAArB,CAAd,EAAyC,IAAI,CAAC,GAAG,CAAC,cAAlD;IAHb,CADF,CAKC,CAAC,IALF,CAME,QAAA,CAAC,QAAD,CAAA;AACE,UAAA;MAAA,MAAA,GACE;QAAA,SAAA,EAAW,KAAK,CAAC,MAAjB;QACA,UAAA,EAAY,KAAK,CAAC,IADlB;QAEA,IAAA,EAAM,IAFN;QAGA,SAAA,EAAW,IAAI,CAAC,GAAG,CAAC,cAHpB;QAIA,QAAA,EAAU;MAJV;AAKF,aAAO;IAPT,CANF;EAFiB;EAkBnB,IAAI,CAAC,QAAL,GAAgB,QAAA,CAAC,SAAD,EAAY,UAAZ,EAAwB,IAAxB,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD,YAAnD,CAAA;WACd,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAtB,CAA+B,SAA/B,EAA0C,UAA1C,EAAsD,IAAtD,EAA4D,SAA5D,EAAuE,QAAvE,EAAiF,IAAI,CAAC,KAAL,CAAW,YAAX,CAAjF,CAA0G,CAAC,IAA3G,CAAgH;MAAC,IAAA,EAAM,IAAI,CAAC,GAAG,CAAC;IAAhB,CAAhH;EADc;EAGhB,IAAI,CAAC,WAAL,GAAmB,QAAA,CAAC,SAAD,EAAY,UAAZ,EAAwB,IAAxB,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD,YAAnD,CAAA;WACjB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAtB,CAAkC,SAAlC,EAA6C,UAA7C,EAAyD,IAAzD,EAA+D,SAA/D,EAA0E,QAA1E,EAAoF,IAAI,CAAC,KAAL,CAAW,YAAX,CAApF,CAA6G,CAAC,IAA9G,CAAA;EADiB;AAGnB,SAAO;AA3FK",
  "sourcesContent": [
    "Web3 = require 'web3'\r\nweb3 = window.web3\r\nif typeof web3 != \"undefined\"\r\n  web3 = new Web3(web3.currentProvider)\r\nelse\r\n  web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"))\r\n\r\nexport PPoL = () ->\r\n  self = this\r\n  self.contract = null\r\n  self.address = null\r\n\r\n  self.init = (_address) ->\r\n    self.address = _address\r\n    abi = require(\"./abi/PPoL.json\").abi\r\n    self.contract = new web3.eth.Contract(abi, _address)\r\n    web3.eth.getAccounts().then(\r\n      (accounts) ->\r\n        web3.eth.defaultAccount = accounts[0]\r\n    )\r\n\r\n  #Verifying node methods\r\n\r\n  self.getVerifyingNodes = (_name) ->\r\n    array = []\r\n    return self.contract.methods[\"verifyingNodesCount\"]().call().then(\r\n      (_count) ->\r\n        count = +_count\r\n        if count == 0\r\n          return []\r\n        array = new Array(count)\r\n        getItem = (id) ->\r\n          return self.contract.methods[\"verifyingNodes\"](id).call().then(\r\n            (_item) ->\r\n              return new Promise((fullfill, reject) ->\r\n                if typeof _item != null\r\n                  array[id] = _item\r\n                  fullfill()\r\n                else\r\n                  reject()\r\n                return\r\n              )\r\n          )\r\n        getAllItems = (getItem(id) for id in [0..count - 1])\r\n        return Promise.all(getAllItems)\r\n    ).then(\r\n      () ->\r\n        return array.filter((_addr) -> _addr != \"\")\r\n    )\r\n\r\n  self.getRandomNodes = (_nodes, _num, _exclude) ->\r\n    cp = _nodes.slice()\r\n    result = []\r\n    while _num > 0\r\n      id = Math.floor(Math.random()*cp.length)\r\n      result.push(cp[id])\r\n      cp.remove(id)\r\n      _num -= 1\r\n    return result\r\n\r\n  self.ringSign = (_userSig, _prvKey, _dummyNodes) ->\r\n    randNums = []\r\n    for i in [0.._dummyNodes.length-1]\r\n      randNums.push(Math.floor(Math.random()*2**256))\r\n    self.contract.methods.ringSign(_userSig, _prvKey, _dummyNodes, randNums).call().then(\r\n      (_sig, _success) ->\r\n        if _success\r\n          sigJSON = JSON.stringify(_sig)\r\n          return sigJSON\r\n        return null\r\n    )\r\n\r\n  #User methods\r\n\r\n  self.signUserMsg = (_uid) ->\r\n    block = null\r\n    web3.eth.getBlock(\"latest\").then(\r\n      (_block) ->\r\n        msg = \"#{_block.number}#{_block.hash}#{_uid}\"\r\n        block = _block\r\n        _userSig = web3.eth.sign(web3.utils.keccak256(msg), web3.eth.defaultAccount)\r\n    ).then(\r\n      (_userSig) ->\r\n        result =\r\n          _blockNum: block.number\r\n          _blockHash: block.hash\r\n          _uid: _uid\r\n          _userAddr: web3.eth.defaultAccount\r\n          _userSig: _userSig\r\n        return result\r\n    )\r\n\r\n  self.logProof = (_blockNum, _blockHash, _uid, _userAddr, _userSig, _ringSigJSON) ->\r\n    self.contract.methods.logProof(_blockNum, _blockHash, _uid, _userAddr, _userSig, JSON.parse(_ringSigJSON)).send({from: web3.eth.defaultAccount})\r\n\r\n  self.verifyProof = (_blockNum, _blockHash, _uid, _userAddr, _userSig, _ringSigJSON) ->\r\n    self.contract.methods.verifyProof(_blockNum, _blockHash, _uid, _userAddr, _userSig, JSON.parse(_ringSigJSON)).call()\r\n\r\n  return self\r\n\r\n"
  ]
}